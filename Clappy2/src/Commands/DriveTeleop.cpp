// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveTeleop.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveTeleop::DriveTeleop(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	m_X = 0.0;
	m_Y = 0.0;
	m_T = 0.0;
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveTeleop::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void DriveTeleop::Execute() {

	m_X = Robot::oi->joystick1->GetX();
	m_Y = Robot::oi->joystick1->GetY();
	m_T = Robot::oi->joystick1->GetTwist();

	if (Robot::driveTrain->GetDirection() == static_cast<int>(Direction::FORWARD))
	{
		Robot::driveTrain->SetMotorSpeed(DriveMotor::TOP_LEFT, m_Y - m_T);
		Robot::driveTrain->SetMotorSpeed(DriveMotor::TOP_RIGHT, (m_Y + m_T > 1.0) ? 1.0 : m_Y + m_T);
		Robot::driveTrain->SetMotorSpeed(DriveMotor::BOTTOM_LEFT, m_Y - m_T);
		Robot::driveTrain->SetMotorSpeed(DriveMotor::BOTTOM_RIGHT, (m_Y + m_T > 1.0) ? 1.0 : m_Y + m_T);
		Robot::driveTrain->SetMotorSpeed(DriveMotor::CENTER, m_X);
	}
	else
	{
		Robot::driveTrain->SetMotorSpeed(DriveMotor::TOP_RIGHT, m_Y - m_T);
		Robot::driveTrain->SetMotorSpeed(DriveMotor::TOP_LEFT, (m_Y + m_T > 1.0) ? 1.0 : m_Y + m_T);
		Robot::driveTrain->SetMotorSpeed(DriveMotor::BOTTOM_RIGHT, m_Y - m_T);
		Robot::driveTrain->SetMotorSpeed(DriveMotor::BOTTOM_LEFT, (m_Y + m_T > 1.0) ? 1.0 : m_Y + m_T);
		Robot::driveTrain->SetMotorSpeed(DriveMotor::CENTER, -m_X);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool DriveTeleop::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void DriveTeleop::End() {
	Robot::driveTrain->StopMoving();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveTeleop::Interrupted() {
	Robot::driveTrain->StopMoving();
}
